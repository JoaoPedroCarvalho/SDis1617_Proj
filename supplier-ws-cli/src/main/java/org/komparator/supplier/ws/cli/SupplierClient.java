package org.komparator.supplier.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;

import org.komparator.supplier.ws.BadProductId_Exception;
import org.komparator.supplier.ws.BadProduct_Exception;
import org.komparator.supplier.ws.BadQuantity_Exception;
import org.komparator.supplier.ws.BadText_Exception;
import org.komparator.supplier.ws.InsufficientQuantity_Exception;
import org.komparator.supplier.ws.ProductView;
import org.komparator.supplier.ws.PurchaseView;
import org.komparator.supplier.ws.SupplierPortType;
import org.komparator.supplier.ws.SupplierService;
import org.komparator.supplier.ws.handler.AuthClientHandler;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class SupplierClient implements SupplierPortType {

    /** WS service */
    SupplierService service = null;

    /** WS port (port type is the interface, port is the implementation) */
    SupplierPortType port = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    public String getWsURL() {
	return wsURL;
    }

    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
	return verbose;
    }

    public void setVerbose(boolean verbose) {
	this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public SupplierClient(String wsURL) throws SupplierClientException {
	this.wsURL = wsURL;
	createStub();
    }

    /** constructor with provided UDDI location and name */
    public SupplierClient(String uddiURL, String wsName) throws SupplierClientException {
	this.uddiURL = uddiURL;
	this.wsName = wsName;
	uddiLookup();
	createStub();
    }

    /** UDDI lookup */
    private void uddiLookup() throws SupplierClientException {
	try {
	    if (verbose)
		System.out.printf("Contacting UDDI at %s%n", uddiURL);
	    UDDINaming uddiNaming = new UDDINaming(uddiURL);

	    if (verbose)
		System.out.printf("Looking for '%s'%n", wsName);
	    wsURL = uddiNaming.lookup(wsName);

	} catch (Exception e) {
	    String msg = String.format("Client failed lookup on UDDI at %s!", uddiURL);
	    throw new SupplierClientException(msg, e);
	}

	if (wsURL == null) {
	    String msg = String.format("Service with name %s not found on UDDI at %s", wsName, uddiURL);
	    throw new SupplierClientException(msg);
	}
    }

    /** Stub creation and configuration */
    private void createStub() {
	if (verbose)
	    System.out.println("Creating stub ...");
	service = new SupplierService();
	port = service.getSupplierPort();

	if (wsURL != null) {
	    if (verbose)
		System.out.println("Setting endpoint address ...");
	    BindingProvider bindingProvider = (BindingProvider) port;
	    Map<String, Object> requestContext = bindingProvider.getRequestContext();
	    requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
	}
    }

    // remote invocation methods ----------------------------------------------

    @Override
    public ProductView getProduct(String productId) throws BadProductId_Exception {
	BindingProvider bindingProvider = (BindingProvider) port;
	Map<String, Object> requestContext = bindingProvider.getRequestContext();
	requestContext.put(AuthClientHandler.UDDI_URL_PROPERTY, this.uddiURL);
	return port.getProduct(productId);
    }

    @Override
    public List<ProductView> searchProducts(String descText) throws BadText_Exception {
	BindingProvider bindingProvider = (BindingProvider) port;
	Map<String, Object> requestContext = bindingProvider.getRequestContext();
	requestContext.put(AuthClientHandler.UDDI_URL_PROPERTY, this.uddiURL);
	return port.searchProducts(descText);
    }

    @Override
    public String buyProduct(String productId, int quantity)
	    throws BadProductId_Exception, BadQuantity_Exception, InsufficientQuantity_Exception {
	BindingProvider bindingProvider = (BindingProvider) port;
	Map<String, Object> requestContext = bindingProvider.getRequestContext();
	requestContext.put(AuthClientHandler.UDDI_URL_PROPERTY, this.uddiURL);
	return port.buyProduct(productId, quantity);
    }

    @Override
    public String ping(String name) {
	BindingProvider bindingProvider = (BindingProvider) port;
	Map<String, Object> requestContext = bindingProvider.getRequestContext();
	requestContext.put(AuthClientHandler.UDDI_URL_PROPERTY, this.uddiURL);
	return port.ping(name);
    }

    @Override
    public void clear() {
	BindingProvider bindingProvider = (BindingProvider) port;
	Map<String, Object> requestContext = bindingProvider.getRequestContext();
	requestContext.put(AuthClientHandler.UDDI_URL_PROPERTY, this.uddiURL);
	port.clear();
    }

    @Override
    public void createProduct(ProductView productToCreate) throws BadProductId_Exception, BadProduct_Exception {
	BindingProvider bindingProvider = (BindingProvider) port;
	Map<String, Object> requestContext = bindingProvider.getRequestContext();
	requestContext.put(AuthClientHandler.UDDI_URL_PROPERTY, this.uddiURL);
	port.createProduct(productToCreate);
    }

    @Override
    public List<ProductView> listProducts() {
	BindingProvider bindingProvider = (BindingProvider) port;
	Map<String, Object> requestContext = bindingProvider.getRequestContext();
	requestContext.put(AuthClientHandler.UDDI_URL_PROPERTY, this.uddiURL);
	return port.listProducts();
    }

    @Override
    public List<PurchaseView> listPurchases() {
	BindingProvider bindingProvider = (BindingProvider) port;
	Map<String, Object> requestContext = bindingProvider.getRequestContext();
	requestContext.put(AuthClientHandler.UDDI_URL_PROPERTY, this.uddiURL);
	return port.listPurchases();
    }

}